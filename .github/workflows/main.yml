# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ lokesh ]
#   pull_request:
#     branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: Set current date as env variable
        run: |
          echo "NOW=$(date +"%Y%m%d.%H%M%S")" >> $GITHUB_ENV
      - name: GitHub Tag
  # You may pin to the exact commit or the version.
  # uses: mathieudutour/github-tag-action@4c5d8c555a7cc4dca5e65d90b67dcddbb52ef77e
        uses: mathieudutour/github-tag-action@v5.6
        with:
#     Required for permission to tag the repo.
         github_token: ${{ secrets.GITHUB_TOKEN }}
         release_branches: lokesh
         custom_tag: $(date +"%Y%m%d.%H%M%S")
    # Which type of bump to use when none explicitly provided (default: `patch`).
#     default_bump: # optional, default is patch
#     # A prefix to the tag name (default: `v`).
#     tag_prefix: # optional, default is v
#     # A suffix to a pre-release tag name (default: `<branch>`).
#     append_to_pre_release_tag: # optional
#     # Custom tag name. If specified, it overrides bump settings.
#     custom_tag: $(date +'%Y-%m-%dT%H:%M:%S')
#     # Comma separated list of release rules. Format: `<keyword>:<release_type>`. Example: `hotfix:patch,pre-feat:preminor`.
#     custom_release_rules: # optional
#     # Comma separated list of branches (bash reg exp accepted) that will generate the release tags. Other branches and pull-requests generate versions postfixed with the commit hash and do not generate any tag. Examples: `master` or `.*` or `release.*,hotfix.*,master`...
#     release_branches: # optional, default is master,main
#     # Comma separated list of branches (bash reg exp accepted) that will generate pre-release tags.
#     pre_release_branches: # optional
#     # Boolean to create an annotated tag rather than lightweight.
#     create_annotated_tag: # optional, default is false
#     # Boolean to fetch all tags for a repo (if false, only the last 100 will be fetched).
#     fetch_all_tags: # optional, default is false
#     # Do not perform tagging, just calculate next version and changelog, then exit.
#     dry_run: # optional, default is false
 
